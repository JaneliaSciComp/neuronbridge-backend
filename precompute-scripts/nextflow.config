params {
   singularity_cache_dir = getEnvValue("HOME", "/tmp") + "/.singularity_cache"
   user_id = getUID()

   // to run using the local app jar
   // set app to '../neuron-search-tools/target/colormipsearch-3.1.0-jar-with-dependencies.jar'
   app = ''
   log_config = 'mylocal/log4j.properties'
   db_config = 'mylocal/devdb-config.properties'
   mips_base_dir = '/nrs/jacs/jacsData/filestore'
   lsf_opts = '-P scicompsoft'
   runtime_opts = ''

   all_brain_and_vnc_LM_libraries = [
      'flylight_split_gal4_published',
      'flylight_gen1_mcfo_published',
      'flylight_annotator_gen1_mcfo_published',
   ]
   all_brain_and_vnc_EM_libraries = [
      'flyem_hemibrain_1_2_1',
      'flywire_fafb_783',
      'flyem_manc_1_0',
      'flyem_vnc_0_5',
   ]

   cpus = 30
   mem_gb = 400
   java_opts = ''

   anatomical_area = '' // brain, vnc, for MIP exports it can be brain+vnc

   tool_runner = '' // for debugging set this to echo

   first_job = 0
   last_job = 0
   job_list = ''

   // Variants import
   import_library = 'flyem_optic_lobe_1_0'
   import_tag = 'import-optic-lobe-20240521'
   variants_input_dir = '/nrs/scicompsoft/emlm/public_release_2024/optic_lobe'
   library_base_dir = '/nrs/jacs/jacsData/filestore/system/ColorDepthMIPs'
   source_cdm_location = ''
   display_cdm_location = ''
   searchable_cdm_location = 'searchable'
   grad_location = 'grad'
   zgap_location = 'zgap'
   variants_output_dir = ''
   variants_json_file = ''

   dry_run = true
   libstore_dir = '/nrs/jacs/jacsData/filestore/system/ColorDepthMIPs'
   display_cdm_dest = ''
   searchable_cdm_dest = 'searchable'
   grad_dest = 'grad'
   zgap_dest = 'zgap'

   // MIPs selection params
   masks_library = 'flywire_fafb_783'
   masks_published_names = ''
   masks_tags = ''
   masks_excluded_tags = ''
   mask_terms = ''
   mask_excluded_terms = 'optic'
   targets_library = 'flylight_gen1_mcfo_published'
   targets_published_names = ''
   target_terms = ''
   target_excluded_terms = 'optic'
   targets_tags = ''
   targets_excluded_tags = ''
   mip_ids = ''
   mip_libraries = ''
   mip_published_names = ''
   mip_release_labels = ''
   mip_tags = ''
   mip_processing_tags = ''
   mip_excluded_tags = 'validationError'

   // params common for all algorithms
   mirror_flag = true

   // CDS options
   cds_cache_size = 50000
   cds_processing_tag = 'cds-flywire-20240522'
   // CDS processing and persistence params
   cds_mask_batch_size = 10000
   cds_target_batch_size = 5000
   cds_processing_size = 250
   update_cds_matches = true
   cds_write_batch_size = 400000
   cds_parallelize_write_results = true
   // CDS algorithm params
   mask_th = 20
   target_th = 20
   pix_color_fluctuation = 1.0
   xy_shift = 2
   pct_pos_pixels = 1.0

   // GRAD score options
   gradscore_cache_size = 150000
   gradscore_processing_tag = 'ga-flywire-20240322'
   // GRAD processing params
   gradscore_batch_size = 100
   ga_processing_size = 10
   process_partitions_concurrently = false
   // GRAD scoring selection params
   top_best_line_matches = 300
   top_best_sample_matches_per_line = 0
   top_best_matches_per_sample = 0

   // Normalize GRAD scores
   normalize_ga_processing_tag = 'normalize-ga-flywire-20240322'
   normalize_ga_batch_size = 10000

   // Tag
   data_version = '3.3.0'

   // Validate data
   validate_libs = ''
   validate_published_names = ''

   // Export data
   exported_mask_tags = data_version
   excluded_from_exported_mask_tags = 'validationError'
   exported_target_tags = data_version
   excluded_from_exported_target_tags = 'validationError'
   exported_mask_terms =  ''
   excluded_from_exported_mask_terms = 'optic'
   exported_target_terms = ''
   excluded_from_exported_target_terms = 'optic'
   exported_mask_libs = ''
   exported_target_libs = ''
   base_export_dir = '/nrs/neuronbridge'
   jacs_url = ''
   jacs_authorization = ''
   default_image_store = 'fl:open_data:brain'
   image_stores_map = [
      JRC2018_Unisex_20x_HR : 'fl:open_data:brain',
      JRC2018_VNC_Unisex_40x_DS : 'fl:open_data:vnc',
   ]
   export_batch_size = 4000
   jacs_read_batch_size = 2000
   export_processing_size = 250
}

profiles {
   standard {
      docker.enabled = false
      singularity.enabled = false
      apptainer.enabled = false
      pod.enabled = false

      params {
         // use the local app jar
         app = '../neuron-search-tools/target/colormipsearch-3.1.0-jar-with-dependencies.jar'
      }
   }

   localsingularity {
      docker.enabled = false
      pod.enabled = false
      singularity.enabled = true
   }

   localdocker {
      docker.enabled = true
      singularity.enabled = false
      apptainer.enabled = false
   }

   kubernetes {
      params {
         cpus = 20
         mem_gb = 170
         ga_processing_size = 12
         gradscore_cache_size = 12768
      }

      executor {
         queueSize = 6
      }

      pod.enabled = true
      docker.enabled = false
      singularity.enabled = false

      process {
         executor = 'k8s'

         withLabel: neuronbridgeTools {
            ext.container = 'janeliascicomp/colormipsearch-tools:3.1.0'
         }

         withName: EXPORT {
            pod = [
               [hostPath: params.base_export_dir,
                mountPath: params.base_export_dir]
            ]
         }
      }

      wave {
         enabled = false
      }

      k8s {
         autoMountHostPaths = true
         computeResourceType = 'Job'
         httpConnectTimeout = '600s'
         httpReadTimeout = '600s'
         context = 'nfcontext'
         namespace = 'default'
         runAsUser = params.user_id
         pullPolicy = 'Always'
      }
   }

   lsf {
      params {
         cpus = 20
         mem_gb = 300
         gradscore_cache_size = 40000
      }

      process {
         executor = 'lsf'
         clusterOptions = params.lsf_opts

         withLabel: prefer_local {
            executor = 'local'
         }
      }

      docker.enabled = false
      singularity.enabled = true

   }

}

singularity {
   autoMounts = true
   cacheDir = params.singularity_cache_dir
}

// Borrowed from nf-virontus/nextflow.config
// Try to get a system environment variable value with some key. If the key
// doesn't exist, then return a default value
def getEnvValue(envKey, defaultValue = null) {
    envMap = new HashMap(System.getenv())
    if (envMap.containsKey(envKey)) {
        envMap[envKey]
    } else {
        defaultValue
    }
}

def getUID() {
    def p = Runtime.getRuntime().exec('id -u')
    try (InputStreamReader pout = new InputStreamReader(p.inputStream)) {
        pout.readLine() as Integer
    }
}
